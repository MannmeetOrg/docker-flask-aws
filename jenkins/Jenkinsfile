pipeline {
    agent any

    environment {
        // AWS and DB
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION            = 'us-east-1'
        DB_HOST               = credentials('DB_HOST')
        DB_PORT               = '3306'
        DB_NAME               = 'flask_app_db'
        DB_USER               = 'flask_user'
        DB_PASSWORD           = credentials('DB_PASSWORD')
        // Docker Hub
        DOCKER_HUB_USERNAME   = credentials('DOCKER_HUB_USERNAME')
        DOCKER_HUB_PASSWORD   = credentials('DOCKER_HUB_PASSWORD')
        DOCKER_IMAGE          = 'cloudmahir19/flaskapp'
        // Flask
        FLASK_ENV             = 'production'
        FLASK_SECRET_KEY      = credentials('FLASK_SECRET_KEY')
        DEBUG                 = 'False'
        // Slack
        SLACK_WEBHOOK_URL     = credentials('SLACK_WEBHOOK_URL')
        // Ansible
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test') {
            steps {
                sh '''
                    pip install -r requirements.txt
                    pip install pytest coverage
                    coverage run -m pytest
                    coverage report --fail-under=80
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                        sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Deploy (Blue/Green)') {
            steps {
                // Assumes Ansible playbooks are present in repo or fetched as needed
                sh '''
                    ansible-playbook -i ansible/inventory ansible/deploy_blue_green.yml \
                        --extra-vars "docker_image=${DOCKER_IMAGE}:${BUILD_NUMBER} flask_env=${FLASK_ENV} flask_secret_key=${FLASK_SECRET_KEY} db_host=${DB_HOST} db_port=${DB_PORT} db_name=${DB_NAME} db_user=${DB_USER} db_password=${DB_PASSWORD} debug=${DEBUG}"
                '''
            }
        }

        stage('Notify Slack') {
            steps {
                script {
                    def payload = """
                    {
                        "text": ":rocket: Jenkins Build #${BUILD_NUMBER} for *${env.JOB_NAME}* completed. Status: ${currentBuild.currentResult}",
                        "channel": "#devops-updates"
                    }
                    """
                    sh """
                        curl -X POST -H 'Content-type: application/json' \
                        --data '${payload}' ${SLACK_WEBHOOK_URL}
                    """
                }
            }
        }
    }

    post {
        failure {
            script {
                def payload = """
                {
                    "text": ":x: Jenkins Build #${BUILD_NUMBER} for *${env.JOB_NAME}* failed!",
                    "channel": "#devops-updates"
                }
                """
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '${payload}' ${SLACK_WEBHOOK_URL}
                """
            }
        }
    }
}
